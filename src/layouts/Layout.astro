---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="bg-neutral-900 text-white text-opacity-90">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
    <header></header>
    <nav>
      <ul>
        <li><a href="/">Messages</a></li>
        <li><a href="/about">About</a></li>
        <li><a href="/contact">Contact</a></li>
      </ul>
    </nav>
    <div>
      <nav id="conversations" class="bg-zinc-800 flex flex-col p-2 gap-1">
        
      </nav>
      <slot />
    </div>
    <footer>
      <nav>
        <ul>
          <li><a href="/">Messages</a></li>
          <li><a href="/about">About</a></li>
          <li><a href="/contact">Contact</a></li>
        </ul>
      </nav>
    </footer>
	</body>
</html>

<script>
  import '../store/messages'
  import { $conversations } from '../store/conversations';
  import type { Conversation } from '../store/conversations';
  import { timeSince } from '../utils/timeSince'
  const conversationsList = document.querySelector('#conversations')!;
  type Conversations = Record<string, Conversation>

  $conversations.subscribe((conversations: Conversations) => {
    const entries = Object.entries(conversations);
    for (let i = 0; i < entries.length; i++) {
    const conversation = entries[i][1];
    const element = 
    `<a href="/conversation/${conversation.id}" class="bg-white p-4 rounded-lg ${location.pathname.split("/")[location.pathname.split("/").length - 1] === conversation.id ? "bg-opacity-10" : "bg-opacity-0 hover:bg-opacity-5"}"]>
      <div class="flex justify-between">
        <h1 class="font-semibold">
        ${conversation.conversationTitle}
        </h1>
        
        ${
          conversation?.lastMessage &&
          conversation?.lastMessage &&
          conversation?.timestamp &&
          `<span class="opacity-70 text-xs">
            ${
              timeSince(conversation?.timestamp)
            }
          </span>` || ""
        }

      </div>
      <p class="opacity-70">
        ${conversation.lastMessage || "No messages yet"}
      </p>
    </a>`;
    conversationsList.innerHTML += element;
    }
  });
</script>
