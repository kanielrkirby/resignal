---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="bg-neutral-900 text-white text-opacity-90">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
    <header></header>
    <div class="flex h-full">
      <nav id="conversations" class="bg-zinc-800 flex flex-col p-2 gap-1 max-sm:hidden">
        
      </nav>
      <slot />
    </div>
	</body>
</html>

<style>
html, body {
  height: 100%;
}
</style>

<script>
  import '../store/messages'
  import { $conversations } from '../store/conversations';
  import type { Conversation } from '../store/conversations';
  import { timeSince } from '../utils/timeSince'
  import { AvatarColorMap } from '../types/Colors'
  const conversationsList = document.querySelector('#conversations')!;
  type Conversations = Record<string, Conversation>

  $conversations.subscribe((conversations: Conversations) => {
    const entries = Object.entries(conversations);
    for (let i = 0; i < entries.length; i++) {
      const conversation = entries[i][1];
      let imgSrc: string | undefined = undefined
      if (conversation.profileAvatar) {
        const pathSplit = conversation.profileAvatar.path.split("/")[1];
        const isSvg = pathSplit.endsWith(".svg");
        imgSrc = `${location.origin}/${isSvg ? "icons" : "attachments"}/${pathSplit}${isSvg ? "" : ".jpeg"}`;
      }
      console.log(imgSrc)
      const element = 
      `<a href="/conversation/${conversation.id}" class="w-full gap-3 bg-white p-4 rounded-lg flex justify-between items-center ${location.pathname.split("/")[location.pathname.split("/").length - 1] === conversation.id ? "bg-opacity-10" : "bg-opacity-0 hover:bg-opacity-5"}"]>
        ${imgSrc ? `<img src="${imgSrc}" class="w-12 h-12 rounded-full" />` : 
        `<div data-colors="${conversation.color || "null"}" class="flex justify-center items-center text-xl w-12 shrink-0 h-12 rounded-full">${conversation.conversationTitle && conversation.conversationTitle[0] || "N"}</div>`}
        <div class="flex flex-col w-full overflow-x-hidden">
          <div class="flex justify-between w-full">
            <h1 class="font-semibold">
            ${conversation.conversationTitle}
            </h1>
            
            ${
              conversation?.lastMessage &&
              conversation?.timestamp &&
              `<span class="opacity-70 text-xs">
                  ${timeSince(conversation?.timestamp) ?? ""}
              </span>` || ""
            }
          </div>
          <div class="flex gap-2 w-full">
            <p class="opacity-70 text-sm text-ellipsis w-full">
              ${conversation.lastMessage || "No messages yet"}
            </p>
            ${
              conversation?.lastMessage ?
              `<img src="${location.origin}/icons/messagestatus-${conversation.lastMessageStatus?.toLowerCase() ?? "read"}.svg" class="w-4 h-fit" />`
              : ""
            }
          </div>
        </div>
      </a>`;
      conversationsList.innerHTML += element;
    }
    const colorables = document.querySelectorAll("[data-colors]") as NodeListOf<HTMLElement>;

//     new Map([
//  [
//    'A100',
//    {
//      bg: '#e3e3fe',
//      fg: '#3838f5',
//    },
//  ],
//  [
//    'A110',
//    {
//      bg: '#dde7fc',
//      fg: '#1251d3',
//    },
//  ],
//  ])
    for (let i = 0; i < colorables.length; i++) {
      const colorable = colorables[i];
      const color = colorable.getAttribute("data-colors") as string;
      const colors = AvatarColorMap.get(color);
      if (color === "null" || colors === undefined) {
        colorable.style.backgroundColor = "#111";
        colorable.style.color = "#fff";
      } else {
        colorable.style.backgroundColor = colors?.bg
        colorable.style.color = colors?.fg;
      }
    }
  });
</script>
