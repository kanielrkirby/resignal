---
interface Props {
	title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="bg-neutral-900 text-white text-opacity-90">
	<head>
		<meta charset="UTF-8" />
		<meta name="description" content="Astro description" />
		<meta name="viewport" content="width=device-width" />
		<link rel="icon" type="image/svg+xml" href="/favicon.svg" />
		<meta name="generator" content={Astro.generator} />
		<title>{title}</title>
	</head>
	<body>
    <header></header>
    <div class="flex">
      <nav id="conversations" class="bg-zinc-800 flex flex-col p-2 gap-1 max-sm:hidden">
        
      </nav>
      <slot />
    </div>
	</body>
</html>

<script>
  import '../store/messages'
  import { $conversations } from '../store/conversations';
  import type { Conversation } from '../store/conversations';
  import { timeSince } from '../utils/timeSince'
  const conversationsList = document.querySelector('#conversations')!;
  type Conversations = Record<string, Conversation>

  $conversations.subscribe((conversations: Conversations) => {
    const entries = Object.entries(conversations);
    for (let i = 0; i < entries.length; i++) {
    const conversation = entries[i][1];
    const element = 
    `<a href="/conversation/${conversation.id}" class="w-full gap-3 bg-white p-4 rounded-lg flex justify-between ${location.pathname.split("/")[location.pathname.split("/").length - 1] === conversation.id ? "bg-opacity-10" : "bg-opacity-0 hover:bg-opacity-5"}"]>
      ${conversation?.profileAvatar?.path ? `<img src="${location.origin}/attachments/${conversation.profileAvatar.path.split("/")[1]}.jpeg" class="w-12 h-12 rounded-full" />` : ""}
      <div class="flex flex-col w-full overflow-x-hidden">
        <div class="flex justify-between w-full">
          <h1 class="font-semibold">
          ${conversation.conversationTitle}
          </h1>
          
          ${
            conversation?.lastMessage &&
            conversation?.lastMessage &&
            conversation?.timestamp &&
            `<span class="opacity-70 text-xs">
              ${
                timeSince(conversation?.timestamp)
              }
            </span>` || ""
          }
        </div>
        <div class="flex gap-2 w-full">
          <p class="opacity-70 text-sm text-ellipsis w-full">
            ${conversation.lastMessage || "No messages yet"}
          </p>
          <img src="${location.origin}/icons/messagestatus-${conversation.lastMessageStatus?.toLowerCase() ?? "read"}.svg" class="w-4 h-fit" />
        </div>
      </div>
    </a>`;
    conversationsList.innerHTML += element;
    }
  });
</script>
