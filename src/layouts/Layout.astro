---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="bg-neutral-900 text-white text-opacity-90">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <header></header>
    <div class="flex h-full">
      <div class="flex h-full">
        <nav
          id="conversations"
          class="flex h-full flex-col gap-1 overflow-y-scroll bg-zinc-800 p-2"
        >
        </nav>
        <div
          data-resize-sidebar-handle
          class="h-full w-3 cursor-ew-resize"
        >
        <div class="w-[.5px] bg-white opacity-30 h-full">
        </div>
        </div>
      </div>
      <main class="h-full w-full resize-x">
        <slot />
      </main>
    </div>
  </body>
</html>

<style>
  html,
  body {
    height: 100%;
  }
</style>

<script>
  import "../store/messages";
  import { $conversations } from "../store/conversations";
  import type { Conversation } from "../store/conversations";
  import { timeSince } from "../utils/timeSince";
  import { AvatarColorMap } from "../types/Colors";
  const conversationsList = document.querySelector("#conversations")!;
  type Conversations = Record<string, Conversation>;

  const handle = document.querySelector("[data-resize-sidebar-handle]") as HTMLElement;
  const hook = document.querySelector("#conversations") as HTMLElement | null;

  let minWidth: number | undefined = undefined
  let maxWidth: number | undefined = undefined

  const resize = (e: MouseEvent) => {
    e.preventDefault();
    minWidth = 300
    maxWidth = 500
    const width = e.clientX;
    if (minWidth !== undefined && maxWidth !== undefined) {
      if (width > maxWidth) hook!.style.width = `${maxWidth}px`
      else if (width < minWidth) hook!.style.width = `${minWidth}px`
      else hook!.style.width = `${width}px`;
    }
    document.addEventListener(
      "mouseup",
      () => {
        document.removeEventListener("mousemove", resize);
      },
      { once: true },
    );
  };

  function resizer() {
    document.addEventListener("mousemove", resize);
  }

  handle.addEventListener("mousedown", resizer);

  $conversations.subscribe((conversations: Conversations) => {
    const entries = Object.entries(conversations);
    for (let i = 0; i < entries.length; i++) {
      const conversation = entries[i][1];
      let imgSrc: string | undefined = undefined;
      if (conversation.profileAvatar) {
        const pathSplit = conversation.profileAvatar.path.split("/")[1];
        const isSvg = pathSplit.endsWith(".svg");
        imgSrc = `${location.origin}/${
          isSvg ? "icons" : "attachments"
        }/${pathSplit}${isSvg ? "" : ".jpeg"}`;
      }
      console.log(imgSrc);
      const element = `<a href="/conversation/${
        conversation.id
      }" class="w-full gap-3 bg-white px-4 py-2 rounded-lg flex justify-between items-center ${
        location.pathname.split("/")[
          location.pathname.split("/").length - 1
        ] === conversation.id
          ? "bg-opacity-10"
          : "bg-opacity-0 hover:bg-opacity-5"
      }"]>
        ${
          imgSrc
            ? `<img src="${imgSrc}" class="w-12 h-12 rounded-full" />`
            : `<div data-colors="${
                conversation.color || "null"
              }" class="flex justify-center items-center text-xl w-12 shrink-0 h-12 rounded-full">${
                (conversation.conversationTitle &&
                  conversation.conversationTitle[0]) ||
                "N"
              }</div>`
        }
        <div class="flex flex-col w-full overflow-x-hidden">
          <div class="flex justify-between w-full">
            <h1 class="font-semibold text-[.90rem] text-ellipses">
            ${conversation.conversationTitle}
            </h1>
            
            ${
              (conversation?.lastMessage &&
                conversation?.timestamp &&
                `<span class="opacity-70 text-xs whitespace-nowrap">
                  ${timeSince(conversation?.timestamp) ?? ""}
              </span>`) ||
              ""
            }
          </div>
          <div class="flex gap-2 w-full">
            <p class="opacity-70 text-[.82rem] text-ellipsis w-full h-[2.5rem] [display:-webkit-box] [-webkit-line-clamp:2] [-webkit-box-orient:vertical]">
              ${conversation.lastMessage || "No messages yet"}
            </p>
            ${
              conversation?.lastMessage
                ? `<img src="${location.origin}/icons/messagestatus-${
                    conversation.lastMessageStatus?.toLowerCase() ?? "read"
                  }.svg" class="w-4 h-fit opacity-70" />`
                : ""
            }
          </div>
        </div>
      </a>`;
      conversationsList.innerHTML += element;
    }
    const colorables = document.querySelectorAll(
      "[data-colors]",
    ) as NodeListOf<HTMLElement>;

    //     new Map([
    //  [
    //    'A100',
    //    {
    //      bg: '#e3e3fe',
    //      fg: '#3838f5',
    //    },
    //  ],
    //  [
    //    'A110',
    //    {
    //      bg: '#dde7fc',
    //      fg: '#1251d3',
    //    },
    //  ],
    //  ])
    for (let i = 0; i < colorables.length; i++) {
      const colorable = colorables[i];
      const color = colorable.getAttribute("data-colors") as string;
      const colors = AvatarColorMap.get(color);
      if (color === "null" || colors === undefined) {
        colorable.style.backgroundColor = "#111";
        colorable.style.color = "#fff";
      } else {
        colorable.style.backgroundColor = colors?.bg;
        colorable.style.color = colors?.fg;
      }
    }
  });
</script>
