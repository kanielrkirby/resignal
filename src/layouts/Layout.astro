---
interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!doctype html>
<html lang="en" class="bg-neutral-900 text-white text-opacity-90">
  <head>
    <meta charset="UTF-8" />
    <meta name="description" content="Astro description" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg" href="/icons/titlebar_icon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <body>
    <header></header>
    <div class="flex h-full max-sm:!w-full">
      <div id="menu-area" class="flex h-full max-sm:!w-full">
        <menu
          id="archived"
          class="hidden w-[300px] flex-col items-center gap-1 overflow-y-scroll bg-zinc-800 p-2 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-[#ffffff80] scrollbar-rounded-md max-sm:!w-full"
        >
          <header
            class="relative mb-4 flex h-fit w-full items-center justify-center p-2 opacity-90"
          >
            <button
              class="absolute bottom-0 left-0 top-0 my-auto rounded-md bg-white bg-opacity-0 p-2 hover:bg-opacity-10"
            >
              <img src="/icons/chevron-left-white.svg" class="h-full w-full" />
            </button>
            <h1 class="font-semibold">Archived Chats</h1>
          </header>
        </menu>
        <nav
          id="conversations"
          class="flex pr-0 h-full flex-col items-center gap-1 overflow-y-scroll bg-zinc-800 p-2 @container scrollbar-thin scrollbar-track-transparent scrollbar-thumb-[#ffffff80] scrollbar-rounded-md max-sm:!w-full"
        >
          <h1 id="chats" class="font-semibold text-white @[100px]:bg-opacity-0 bg-opacity-40 bg-white @[100px]:w-full w-2/3 rounded-full p-[1px] my-2"><span class="hidden p-2 @[100px]:block">Chats</span></h1>
          <button
            id="archived-button"
            class="flex w-full items-center justify-center gap-2 rounded-md bg-white bg-opacity-0 py-6 opacity-70 hover:bg-opacity-10"
          >
            <img src="/icons/archive.svg" class="h-full" />
            <h1 class="hidden h-fit w-fit text-sm font-bold @[100px]:block">
              Archived Chats
            </h1>
            <span
              id="archived-count"
              class="hidden h-4 w-4 items-center justify-center rounded-full bg-white bg-opacity-10 p-3 text-sm text-white @[100px]:flex"
              >0</span
            >
          </button>
        </nav>
        <div data-resize-sidebar-handle class="h-full w-3 cursor-ew-resize max-sm:!hidden">
          <div class="h-full w-[.5px] bg-white opacity-30"></div>
        </div>
      </div>
      <main class="h-full w-full resize-x max-sm:hidden">
        <slot />
      </main>
    </div>
  </body>
</html>

<style>
  html,
  body {
    height: 100%;
  }
</style>

<script>
  import "../store/messages";
  import { $conversations } from "../store/conversations";
  if (location.pathname.startsWith("/conversation/")) {
    document.querySelector("#menu-area")!.classList.add("!hidden");
    document.querySelector("main")!.classList.remove("max-sm:hidden")
    // skip the rest of the code:
    throw new Error("Skipping code");
  }
  import type { Conversation } from "../store/conversations";
  import { timeSince } from "../utils/timeSince";
  import { AvatarColorMap } from "../types/Colors";
  const conversationsList = document.querySelector("#conversations")!;
  type Conversations = Record<string, Conversation>;

  const handle = document.querySelector(
    "[data-resize-sidebar-handle]",
  ) as HTMLElement;
  const hooks = [document.querySelector("#conversations"), document.querySelector("#archived")] as HTMLElement[];
  const savedWidth =
    parseInt(localStorage.getItem("sidebar-width") || "300") ?? 300;
  let minWidth: number | undefined = undefined;
  let maxWidth: number | undefined = undefined;

  for (let i = 0; i < hooks.length; i++) {
    const hook = hooks[i];
    hook.style.width = `${savedWidth}px`;
  }


  const resize = (e: MouseEvent) => {
    e.preventDefault();
    minWidth = 300;
    maxWidth = 380;
    let width = e.clientX;
    if (minWidth !== undefined && maxWidth !== undefined) {
      if (width < 100) width = 96;
      else if (width > maxWidth) width = maxWidth;
      else if (width < minWidth) width = minWidth;
      for (let i = 0; i < hooks.length; i++) {
        const hook = hooks[i];
        if (hook.id === "archived" && width < 300) width = 300;
        hook!.style.width = `${width}px`;
      }
    }
    document.addEventListener(
      "mouseup",
      () => {
        localStorage.setItem("sidebar-width", width.toString());
        document.removeEventListener("mousemove", resize);
      },
      { once: true },
    );
  };

  function resizer() {
    document.addEventListener("mousemove", resize);
  }

  handle.addEventListener("mousedown", resizer);

  $conversations.subscribe((conversations: Conversations) => {
    const entries = Object.entries(conversations);
    let pinnedSectionExists = false;
    for (let i = 0; i < entries.length; i++) {
      const conversation = entries[i][1];
      if (conversation.conversationTitle === "Signal" && conversation.lastMessage === undefined && conversation?.profileAvatar?.path === "images/profile-avatar.svg") continue
      if (conversation.isPinned) {
        if (!pinnedSectionExists) {
          conversationsList.innerHTML =
            `<h1 id="pinned" class="font-semibold text-white @[100px]:bg-opacity-0 bg-opacity-40 bg-white @[100px]:w-full w-2/3 rounded-full p-[1px] my-2"><span class="hidden p-2 @[100px]:block">Pinned</span></h1>` +
            conversationsList.innerHTML;
          pinnedSectionExists = true;
        }
      }
      let imgSrc: string | undefined = undefined;
      if (conversation.profileAvatar) {
        const pathSplit = conversation.profileAvatar.path.split("/")[1];
        const isSvg = pathSplit.endsWith(".svg");
        imgSrc = `${location.origin}/${
          isSvg ? "icons" : "attachments"
        }/${pathSplit}${isSvg ? "" : ".jpeg"}`;
      }
      if (i === 0) imgSrc = "/icons/note.svg"
      const conversationTitle = i === 0 ? "Note to self" : conversation.conversationTitle
      const element = `<a href="/conversation/${
        conversation.id
      }" class="w-full gap-3 bg-white px-4 py-2 rounded-lg flex justify-between items-center ${
        location.pathname.split("/")[
          location.pathname.split("/").length - 1
        ] === conversation.id
          ? "bg-opacity-10"
          : "bg-opacity-0 hover:bg-opacity-5"
      }"]>
        ${
          imgSrc
            ? `<img src="${imgSrc}" class="w-12 h-12 rounded-full ${i === 0 ? "bg-gray-300 p-2" : ""}" />`
            : `<div data-colors="${
                conversation.color || "null"
              }" class="flex justify-center items-center text-xl w-12 shrink-0 h-12 rounded-full">${
                (conversationTitle &&
                  conversationTitle[0]) ||
                "N"
              }</div>`
        }
        <div class="flex flex-col w-full overflow-x-hidden">
          <div class="flex justify-between w-full">
            <h1 class="font-semibold text-[.90rem] text-ellipses [display:-webkit-box] [-webkit-line-clamp:1] overflow-hidden [-webkit-box-orient:vertical]">
              ${conversationTitle}
            </h1>
            
            ${
              (conversation?.lastMessage &&
                conversation?.timestamp &&
                `<span class="opacity-70 text-xs whitespace-nowrap">
                  ${timeSince(conversation?.timestamp) ?? ""}
              </span>`) ||
              ""
            }
          </div>
          <div class="flex gap-2 w-full">
            <p class="opacity-70 text-[.82rem] text-ellipsis w-full overflow-hidden h-[2.5rem] [display:-webkit-box] [-webkit-line-clamp:2] [-webkit-box-orient:vertical]">
              ${conversation.lastMessage || "No messages yet"}
            </p>
            ${
              conversation?.lastMessage
                ? `<img src="${location.origin}/icons/messagestatus-${
                    getStatus(conversation)
                  }.svg" class="w-4 h-fit opacity-70" />`
                : ""
            }
          </div>
        </div>
      </a>`;
      if (conversation.isPinned) {
        document
          .querySelector("#pinned")!
          .insertAdjacentHTML("afterend", element);
      } else if (conversation.isArchived) {
        const count = document.querySelector("#archived-count")!;
        count.innerHTML = (parseInt(count.innerHTML) + 1).toString();
        document.querySelector("#archived")!.innerHTML += element;
      } else {
        document
          .querySelector("#chats")!
          .insertAdjacentHTML("afterend", element);
      }
    }
    const colorables = document.querySelectorAll(
      "[data-colors]",
    ) as NodeListOf<HTMLElement>;

    for (let i = 0; i < colorables.length; i++) {
      const colorable = colorables[i];
      const color = colorable.getAttribute("data-colors") as string;
      const colors = AvatarColorMap.get(color);
      if (color === "null" || colors === undefined) {
        colorable.style.backgroundColor = "#111";
        colorable.style.color = "#fff";
      } else {
        colorable.style.backgroundColor = colors?.bg;
        colorable.style.color = colors?.fg;
      }
    }
  });
  const archived = document.querySelector("#archived")!;
  const archivedButton = document.querySelector("#archived-button")!;
  archived
    .querySelector("header button")!
    .addEventListener("click", toggleArchive);
  archivedButton.addEventListener("click", toggleArchive);
  const conversations = document.querySelector("#conversations")!;
  function toggleArchive() {
    archived.classList.toggle("hidden");
    archived.classList.toggle("flex");
    conversations.classList.toggle("hidden");
    conversations.classList.toggle("flex");
    handle.classList.toggle("pointer-events-none");
  }
  function getStatus(conversation: Conversation) {
    let status = conversation.lastMessageStatus?.toLowerCase()
    if (status === "viewed") status = undefined
    return status || "read"
  }
</script>
