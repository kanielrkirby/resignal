---
import Layout from "../../layouts/Layout.astro";

export type Params = {
  conversationId: string;
};

const { conversationId } = Astro.params;
---

<Layout title="Messages">
  <ul
    id="messages"
    class="flex h-full w-full flex-col space-y-4 overflow-y-scroll p-4"
  >
  </ul>

  <span id="temp-conversation-id" data-id={conversationId}></span>
</Layout>
<script>
  import { $messages } from "../../store/messages";
  import { $conversations } from "../../store/conversations";

  const tempset = document.querySelector(
    "#temp-conversation-id",
  ) as HTMLElement;
  const conversationId = tempset.dataset.id as string;
  tempset.remove();

  const listElem = (document.querySelector("#messages") as HTMLElement)!;

  const conversation = $conversations.get()[conversationId];

  let day: Date;

  $messages.subscribe((messages) => {
    let elems = messages;
    let html = "";
    let prev: (typeof messages)[0] | undefined;
    for (let i = 0; i < elems.length; i++) {
      const m = messages[i];

      if (m.conversationId !== conversationId) continue;
      if (!m.body && !m.attachments?.length) continue;

      // find next message in conversation
      let next: typeof m | undefined = undefined;
      let j = 0;
      function tryNext() {
        j++;
        next = messages[i + j];
        if (
          !next ||
          next.body === conversation.lastMessage ||
          next.timestamp - m.timestamp > 300000
        )
          return;
        if (next?.conversationId !== conversationId) return tryNext();
        return;
      }
      if (m.body !== conversation.lastMessage) tryNext();

      // conversation identity styling
      const align = m.type === "incoming" ? "self-start" : "self-end";
      const color = m.type === "incoming" ? "bg-neutral-700" : "bg-blue-600";
      let dateOrBlank = "";

      // timestamp grouping
      const groupPrev =
        m?.type === prev?.type &&
        prev?.timestamp &&
        m?.timestamp &&
        m.timestamp - prev.timestamp < 300000;
      const groupNext =
        m?.type === next?.type &&
        next?.timestamp &&
        m?.timestamp &&
        next.timestamp - m.timestamp < 300000;
      const topLi = groupPrev ? "!mt-0.5" : "";
      const topInner = groupNext
        ? align === "self-start"
          ? "rounded-bl-sm"
          : "rounded-br-sm"
        : "";
      const bottomInner = groupPrev
        ? align === "self-start"
          ? "rounded-tl-sm"
          : "rounded-tr-sm"
        : "";

      // message status styling
      let status =
        m?.sendStateByConversationId &&
        m.sendStateByConversationId[m.conversationId]
          ? m.sendStateByConversationId[m.conversationId].status.toLowerCase()
          : "read";
      let image = `<img src="/icons/messagestatus-${status}.svg" alt="${status}" class="w-4 opacity-90 shrink-0">`;

      // timestamp styling
      const timestamp = m.timestamp && !groupNext
        ? `<span class="whitespace-nowrap flex text-xs opacity-80 self-end justify-self-end items-center gap-1 shrink-0">${getTimestamp(
            m.timestamp,
          )}${image}</span>`
        : "";

      // attachments
      let attachmentElements = "";
      for (let i = 0; i < m?.attachments?.length; i++) {
        const attachment = m.attachments[i];
        if (attachment.contentType.startsWith("image")) {
          attachmentElements += `<img src="${attachment.url}" alt="Image, something went wrong." class="max-w-full max-h-96 rounded-md">`;
        } else if (attachment.contentType.startsWith("video")) {
          attachmentElements += `<video src="${attachment.url}" controls class="max-w-full max-h-96 rounded-md"></video>`;
        } else if (attachment.contentType.startsWith("audio")) {
          attachmentElements += `<audio src="${attachment.url}" controls class="rounded-md"></audio>`;
        }
      }

      // message container
      let colorContainer = m.body
        ? `<div class="${color} ${topInner} ${bottomInner} justify-end gap-3 text-[.91rem] px-3 py-2 rounded-2xl text-white w-fit self-end flex"><p class="overflow-hidden">${
            m.body
          }</p>${timestamp || ""}${attachmentElements}</div>`
        : "";
      let elem = `<li class="max-w-[85%] ${topLi} ${align}">${colorContainer}</li>`;

      // date grouping
      const messageDay = new Date(m.timestamp!).toLocaleDateString();
      if (messageDay !== day?.toLocaleDateString()) {
        day = new Date(m.timestamp!);
        let date: string;
        const timeSince = new Date().getTime() - day.getTime();
        if (timeSince < 1000 * 60 * 60 * 24 * 365) {
          date = new Date(day.getTime()).toLocaleDateString([], {
            weekday: "short",
            month: "short",
            day: "numeric",
          });
        } else {
          date = new Date(day.getTime()).toLocaleDateString([], {
            year: "numeric",
            month: "short",
            day: "numeric",
          });
        }
        dateOrBlank = `<li class="text-center text-sm opacity-95">${date}</li>`;
      }

      prev = m;
      html += dateOrBlank;
      html += elem;
    }
    listElem.innerHTML = html;
  });

  function getTimestamp(timestamp: number) {
    const now = new Date();
    const then = new Date(timestamp!);
    const diff = now.getTime() - then.getTime();
    const diffInMinutes = Math.round(diff / 1000 / 60);
    if (diffInMinutes < 60) {
      return `${diffInMinutes}m`;
    } else {
      return then.toLocaleTimeString([], {
        hour: "numeric",
        minute: "2-digit",
      });
    }
  }
</script>
