---
import Layout from "../../layouts/Layout.astro";

export type Params = {
  conversationId: string;
};

const { conversationId } = Astro.params;
---

<Layout title="Messages">
  <ul
    id="messages"
    class="flex h-full w-full flex-col space-y-4 overflow-y-scroll"
  >
  </ul>

  <span id="temp-conversation-id" data-id={conversationId}></span>
</Layout>
<script>
  import { $messages } from "../../store/messages";
  import { $conversations } from "../../store/conversations";

  const tempset = document.querySelector(
    "#temp-conversation-id",
  ) as HTMLElement;
  const conversationId = tempset.dataset.id as string
  tempset.remove();

  const listElem = (document.querySelector("#messages") as HTMLElement)!;

  const conversation = $conversations.get()[conversationId]

  let day: Date;

  $messages.subscribe((messages) => {
    let elems = messages;
    let html = "";
    let prev: typeof messages[0] | undefined;
    for (let i = 0; i < elems.length; i++) {
      const m = messages[i];
      if (m.conversationId !== conversationId) continue;
      if (!m.body && !m.attachments?.length) continue;
      let next: typeof m | undefined = undefined
      let j = 0
      function tryNext() {
        j++
        next = messages[i + j];
        if (!next || next.body === conversation.lastMessage || next.timestamp - m.timestamp > 300000) return
        if (next?.conversationId !== conversationId) return tryNext();
        return
      }
      if (m.body !== conversation.lastMessage) tryNext()
      let elem = "";
      let timestamp = "";
      let body = "";
      let status =
        m?.sendStateByConversationId &&
        m.sendStateByConversationId[m.conversationId]
          ? m.sendStateByConversationId[m.conversationId].status.toLowerCase()
          : "read";
      let image = `<img src="/icons/messagestatus-${status}.svg" alt="${status}" class="w-4 opacity-90 shrink-0">`;
      if (m.timestamp) {
        timestamp = `<span class="whitespace-nowrap flex text-xs opacity-80 self-end justify-self-end items-center gap-1 shrink-0">${
          // timestamp anything under an hour ago is "18m" "36m" "4m"
          // anything over an hour ago is "8:32 PM" "9:32 PM" "10:32 PM"
          (() => {
            const now = new Date();
            const then = new Date(m.timestamp!);
            const diff = now.getTime() - then.getTime();
            const diffInMinutes = Math.round(diff / 1000 / 60);
            if (diffInMinutes < 60) {
              return `${diffInMinutes}m`;
            } else {
              return then.toLocaleTimeString([], {
                hour: "numeric",
                minute: "2-digit",
              });
            }
          })()
        }${image}</span>`;
      }
      const align = m.type === "incoming" ? "self-start" : "self-end";
      let topLi = "";
      let topInner = "";
      let bottomInner = "";
      if (m?.type === prev?.type && prev?.timestamp && m?.timestamp && m.timestamp - prev.timestamp < 300000) {
        topLi = "!mt-0.5"
        topInner = align === "self-start" ? "rounded-tl-sm" : "rounded-tr-sm"
      } 
      if (next?.type === m?.type && next?.timestamp && m?.timestamp && next.timestamp - m.timestamp < 300000) {
        bottomInner = align === "self-start" ? "rounded-bl-sm" : "rounded-br-sm"
      }
      if (m.body) {
        body = `<p class="overflow-hidden">${m.body}</p>`;
      }
      if (body !== "") {
        const color = m.type === "incoming" ? "bg-neutral-700" : "bg-blue-600";
        elem += `<div class="${color} ${topInner} ${bottomInner} justify-end gap-3 text-[.91rem] px-3 py-2 rounded-2xl text-white w-fit self-end flex">${body}${
          timestamp || ""
        }</div>`;
      }
      for (let i = 0; i < m?.attachments?.length; i++) {
        const attachment = m.attachments[i];
        if (attachment.contentType.startsWith("image")) {
          elem += `<img src="${attachment.url}" alt="Image of something" class="max-w-full max-h-96">`;
        } else if (attachment.contentType.startsWith("video")) {
          elem += `<video src="${attachment.url}" controls class="max-w-full max-h-96"></video>`;
        } else if (attachment.contentType.startsWith("audio")) {
          elem += `<audio src="${attachment.url}" controls></audio>`;
        }
      }
      elem = `<li class="max-w-[85%] ${topLi} ${align}">${elem}</li>`;

      // if day is different from last message, add a day header
      const messageDay = new Date(m.timestamp!).toLocaleDateString();
      if (messageDay !== day?.toLocaleDateString()) {
        day = new Date(m.timestamp!);
        // date will be "Wed, Sep 15" if it's less than a year OR "Feb 21, 2021" if it's greater than a year
        let date: string;
        const timeSince = new Date().getTime() - day.getTime();
        if (timeSince < 1000 * 60 * 60 * 24 * 365) {
          date = new Date(day.getTime()).toLocaleDateString([], {
            weekday: "short",
            month: "short",
            day: "numeric",
          });
        } else {
          date = new Date(day.getTime()).toLocaleDateString([], {
            year: "numeric",
            month: "short",
            day: "numeric",
          });
        }
        elem = `<li class="text-center text-sm opacity-95">${date}</li>${elem}`;
      }
      console.log("_");
      console.log("m", m);
      console.log("prev", prev);
      prev = m
      html += elem;
    }
    listElem.innerHTML = html;
  });
</script>
