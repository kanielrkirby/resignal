---
import Layout from "../../layouts/Layout.astro"

export type Params = {
  conversationId: string;
};

const { conversationId } = Astro.params;
---

<Layout title="Messages">
  <h1>Messages</h1>

  <ul id="messages" class="flex flex-col gap-4"></ul>

  <span id="temp-conversation-id" data-id={conversationId}></span>

</Layout>
<script>
import { $messages } from '../../store/messages';

const tempset = document.querySelector('#temp-conversation-id') as HTMLElement
  const conversationId = tempset.dataset.id
tempset.remove()

  const listElem = (document.querySelector('#messages') as HTMLElement)!

  $messages.subscribe((messages) => {
      listElem.innerHTML = messages
      .filter((m) => m.conversationId === conversationId)
      .map((m) => {
          let elem = ""
          let timestamp = ""
          let body = ""
          if (m.timestamp) {
            timestamp = `<span class="whitespace-nowrap text-xs opacity-80 self-end justify-self-end ">${
              // timestamp anything under an hour ago is "18m" "36m" "4m"
              // anything over an hour ago is "8:32 PM" "9:32 PM" "10:32 PM"
              (() => {
                const now = new Date()
                const then = new Date(m.timestamp!)
                const diff = now.getTime() - then.getTime()
                const diffInMinutes = Math.round(diff / 1000 / 60)
                if (diffInMinutes < 60) {
                  return `${diffInMinutes}m`
                } else {
                  return then.toLocaleTimeString([], { hour: 'numeric', minute: '2-digit' })
                }
               })()
            }</span>`
          }
          if (m.body) {
            body = `<p class="">${m.body}</p>`
          }
          if (body !== "") {
            const color = m.type === "incoming" ? "bg-neutral-700" : "bg-blue-600"
            elem += `<div class="${color} justify-end gap-3 text-[.91rem] px-3 py-2 rounded-2xl text-white w-fit self-end flex">${body}${timestamp || ""}</div>`
          }
          for (let i = 0; i < m?.attachments?.length; i++) {
            const attachment = m.attachments[i]
            if (attachment.contentType.startsWith("image")) {
              elem += `<img src="${attachment.url}" alt="Image of something" class="max-w-full max-h-96">`
            } else if (attachment.contentType.startsWith("video")) {
              elem += `<video src="${attachment.url}" controls class="max-w-full max-h-96"></video>`
            } else if (attachment.contentType.startsWith("audio")) {
              elem += `<audio src="${attachment.url}" controls></audio>`
            }
          }
          const align = m.type === "incoming" ? "self-start" : "self-end"
          elem = `<li class="${align}">${elem}</li>`
            return elem
      })
      .join('')
  })

</script>
