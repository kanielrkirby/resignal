---
import Layout from "../../layouts/Layout.astro";

export type Params = {
  conversationId: string;
};

const { conversationId } = Astro.params;
---

<Layout title={"Conversation"}>
  <ul
    id="messages"
    class="flex h-full w-full flex-col space-y-4 overflow-y-scroll overflow-x-hidden p-4 scrollbar-thin scrollbar-track-transparent scrollbar-thumb-[#ffffff80] scrollbar-thumb-rounded-lg"
  >
  </ul>

  <span id="temp-conversation-id" data-id={conversationId}></span>
</Layout>

<script>
  import { $messages } from "../../store/messages";
  import { $conversations } from "../../store/conversations";

  const tempset = document.querySelector(
    "#temp-conversation-id",
  ) as HTMLElement;
  const conversationId = tempset.dataset.id as string;
  tempset.remove();

  const listElem = (document.querySelector("#messages") as HTMLElement)!;

  const conversation = $conversations.get()[conversationId];

  let day: Date;

  $messages.subscribe(async (messages) => {
    let elems = messages;
    let html = "";
    let prev: (typeof messages)[0] | undefined;
    for (let i = 0; i < elems.length; i++) {
      const m = messages[i];
      let body = m.body

      if (m.conversationId !== conversationId) continue;
      if (!m.body && !m.attachments?.length) continue;

      // find next message in conversation
      let next: typeof m | undefined = undefined;
      let j = 0;
      function tryNext() {
        j++;
        next = messages[i + j];
        if (
          !next ||
          next.body === conversation.lastMessage ||
          next.timestamp - m.timestamp > 300000
        )
          return;
        if (next?.conversationId !== conversationId) return tryNext();
        return;
      }
      if (m.body !== conversation.lastMessage) tryNext();

      // conversation identity styling
      const align = m.type === "incoming" ? "self-start" : "self-end";
      const alignItems = align === "self-start" ? "items-start justify-start" : "items-end justify-end";
      const color = m.type === "incoming" ? "bg-neutral-700" : "bg-blue-600";
      let dateOrBlank = "";

      // attachments
      let imagesAndVideos = "";
      let audios = "";
      let hasVisualMedia = false;
      let severalMedia = false;
      for (let i = 0; i < m?.attachments?.length; i++) {
        const attachment = m.attachments[i];
        if (attachment.contentType.startsWith("image")) {
          imagesAndVideos += `<img src="${attachment.url}" alt="Image, something went wrong." class="w-0 min-w-1/2 grow shrink object-cover">`;
          if (hasVisualMedia) severalMedia = true;
          hasVisualMedia = true;
        } else if (attachment.contentType.startsWith("video")) {
          imagesAndVideos += `<video src="${attachment.url}" controls class="w-0 min-w-1/2 grow shrink max-w-full max-h-96 object-cover"></video>`;
          if (hasVisualMedia) severalMedia = true;
          hasVisualMedia = true;
        } else if (attachment.contentType.startsWith("audio")) {
          audios += `<audio src="${attachment.url}" controls class=""></audio>`;
        }
      }
      const media = `<div class="justify-center flex overflow-hidden cursor-pointer w-[16rem] ${
        severalMedia ? "h-40" : "h-fit"
      } rounded-md flex-wrap rounded-md overflow-hidden">${imagesAndVideos}</div>`;

      // timestamp grouping
      const groupPrev =
        m?.type === prev?.type &&
        prev?.timestamp &&
        m?.timestamp &&
        m.timestamp - prev.timestamp < 300000;
      const groupNext =
        m?.type === next?.type &&
        next?.timestamp &&
        m?.timestamp &&
        next.timestamp - m.timestamp < 300000;
      const topLi = groupPrev ? "!mt-0.5" : "";
      const topInner = groupNext
        ? align === "self-start"
          ? "rounded-bl-sm"
          : "rounded-br-sm"
        : "";
      const bottomInner = groupPrev
        ? hasVisualMedia
          ? "!rounded-t-none"
          : align === "self-start"
          ? "rounded-tl-sm"
          : "rounded-tr-sm"
        : "";

      // message status styling
      let status =
        m?.sendStateByConversationId &&
        m.sendStateByConversationId[m.conversationId]
          ? m.sendStateByConversationId[m.conversationId].status.toLowerCase()
          : "read";
      let image = `<img src="/icons/messagestatus-${status}.svg" alt="${status}" class="w-4 opacity-90 shrink-0">`;

      // timestamp styling
      const timestamp =
        m.timestamp && !groupNext
          ? `<span class="whitespace-nowrap flex text-xs opacity-80 self-end justify-self-end items-center gap-1 shrink-0">${getTimestamp(
              m.timestamp,
            )}${image}</span>`
          : "";
      const messageId = m.id;

      const linkInBody = body ? body.match(/https?:\/\/[^\s\)]+/) : undefined;
      if (linkInBody) console.log(linkInBody[0])
      body = body.replaceAll(/\n/g, "<br />")
      if (linkInBody) {
        body = body.replace(
          linkInBody[0],
          `<a href="${linkInBody[0]}" target="_blank" class="underline break-all">${linkInBody[0]}</a>`,
        );
        if (!hasVisualMedia) {
          (async () => {
            const { image, title, description, url, published, error } =
              await getLink(linkInBody[0]);
            if (error) {
              console.error(error);
              setTimeout(() => {
                const elem = document.querySelector(`#${messageId}`) as
                  | HTMLElement
                  | undefined;
              }, 1000);
            } else {
              const linkElem = `
<li id=${messageId} class="sm:w-[85%] md:w-[75%] lg:w-[65%] max-w-full flex ${topLi} ${alignItems} ${align}">
  <div class="h-fit shrink flex-col flex overflow-hidden">
    <img src="${image}" alt="${title}" class="w-full object-cover rounded-md rounded-b-none" />
    <div class="justify-center flex overflow-hidden w-full cursor-pointer h-fit flex-wrap">
      <div class="bg-zinc-800 grow flex flex-col justify-between p-3 w-full">
        <div class="flex flex-col items-start">
          ${title ? `<h1 class="text-base font-semibold">${title}</h1>` : ""}
          ${description ? `<p class="text-sm opacity-90">${description}</p>` : ""}
          ${url ? `<span class="text-sm opacity-80 underline">${url}</span>` : ""}
          ${
            published
              ? `<span class="text-xs opacity-80">${
                  // published is a timezone string
                  new Date(published).toLocaleDateString([], {
                    month: "short",
                    day: "numeric",
                    year: "numeric",
                  })
                }</span>`
              : ""
          }
        </div>
      </div>
    </div>
    <div class="${color} ${topInner} ${bottomInner} justify-end gap-3 overflow-hidden text-[.91rem] px-3 py-2 rounded-2xl rounded-t-none text-white w-full flex">
      <p class="overflow-hidden break-all underline">${body}</p>
      ${timestamp || ""}
    </div>
  </div>
</li>
`;

              setTimeout(() => {
                const linkLoc = document.querySelector(`#${messageId}`) as
                  | HTMLElement
                  | undefined;
                if (linkLoc) {
                  linkLoc.outerHTML = linkElem;
                }
              }, 1000);
            }
          })();
        } 
      }

      // message container
      let colorContainer = body
        ? `<div class="${color} ${topInner} ${bottomInner} justify-end gap-3 text-[.91rem] px-3 py-2 rounded-2xl text-white w-fit flex"><p class="overflow-hidden">${
            body
          }</p>${timestamp || ""}</div>`
        : "";
      let elem = `<li id=${messageId} class="sm:w-[85%] md:w-[75%] lg:w-[65%] max-w-full flex flex-col ${topLi} ${alignItems} ${align}">${media}${colorContainer}${audios}</li>`;

      // date grouping
      const messageDay = new Date(m.timestamp!).toLocaleDateString();
      if (messageDay !== day?.toLocaleDateString()) {
        day = new Date(m.timestamp!);
        let date: string;
        const timeSince = new Date().getTime() - day.getTime();
        if (timeSince < 1000 * 60 * 60 * 24 * 365) {
          date = new Date(day.getTime()).toLocaleDateString([], {
            weekday: "short",
            month: "short",
            day: "numeric",
          });
        } else {
          date = new Date(day.getTime()).toLocaleDateString([], {
            year: "numeric",
            month: "short",
            day: "numeric",
          });
        }
        dateOrBlank = `<li class="text-center text-sm opacity-95">${date}</li>`;
      }

      prev = m;
      html += dateOrBlank;
      html += elem;
    }
    listElem.innerHTML = html;
  });

  function getTimestamp(timestamp: number) {
    const now = new Date();
    const then = new Date(timestamp!);
    const diff = now.getTime() - then.getTime();
    const diffInMinutes = Math.round(diff / 1000 / 60);
    if (diffInMinutes < 60) {
      return `${diffInMinutes}m`;
    } else {
      return then.toLocaleTimeString([], {
        hour: "numeric",
        minute: "2-digit",
      });
    }
  }
  async function getLink(link: string) {
    try {
      const res = await fetch(
        `https://corsproxy.io/?${encodeURIComponent(link)}`,
      );
      const html = await res.text();
      const parser = new DOMParser();
      const doc = parser.parseFromString(html, "text/html");
      const title = doc
        .querySelector("meta[property='og:title']")
        ?.getAttribute("content");
      const description = doc
        .querySelector("meta[property='og:description']")
        ?.getAttribute("content");
      const image = doc
        .querySelector("meta[property='og:image']")
        ?.getAttribute("content");
      let url = doc
        .querySelector("meta[property='og:url']")
        ?.getAttribute("content");
      if (url) {
        // simplify the whole url from "https://asdfasdf.com/other/ptahs" to "asdfasdf.com"
        url = url.replace(/https?:\/\//, "").replace(/\/.*/, "");
      }
      const published = doc
        .querySelector("meta[property='article:published_time']")
        ?.getAttribute("content");
      return { title, description, image, url, published, error: undefined };
    } catch (error) {
      return {
        error,
      };
    }
  }
</script>
